{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"scatterplot만드는 .ipynb의 사본","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyORmkJpAEzFcZiag9eBffb/"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"r5uzlxWZ2Lz8","executionInfo":{"status":"ok","timestamp":1610695020181,"user_tz":-540,"elapsed":16403,"user":{"displayName":"성균관대변성진","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gifg8rB1NI4un7i9fE4zvhEZckT8bZVtcokCAgH=s64","userId":"11276981063598458696"}},"outputId":"b30ec611-e0d8-4bd6-be44-d77b851bea7b"},"source":["import os, sys \r\n","from google.colab import drive \r\n","drive.mount('/content/mnt') \r\n","nb_path = '/content/notebooks' \r\n","os.symlink('/content/mnt/', nb_path) \r\n","sys.path.insert(0, nb_path)\r\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Mounted at /content/mnt\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"64y78Cxh2Wt8"},"source":["import pandas as pd\r\n","import numpy as np\r\n","import datetime as dt\r\n","import matplotlib.pyplot as plt\r\n","from tqdm import tqdm\r\n","import gc\r\n","import random\r\n","import lightgbm as lgb\r\n","import re\r\n","from sklearn.metrics import *\r\n","from sklearn.model_selection import KFold\r\n","import tensorflow as tf\r\n","import string\r\n","\r\n","from tensorflow.keras.models import Sequential\r\n","from tensorflow.keras.layers import BatchNormalization, Activation, Dropout, Flatten, Dense,Softmax, Embedding, GlobalAveragePooling1D\r\n","from tensorflow.keras.layers.experimental.preprocessing import TextVectorization\r\n","\r\n","import warnings\r\n","warnings.filterwarnings(action='ignore')\r\n","\r\n","\r\n","\r\n","\r\n","\r\n","# 필요한 함수 정의\r\n","def make_datetime(x):\r\n","    # string 타입의 Time column을 datetime 타입으로 변경\r\n","    x     = str(x)\r\n","    #print(\"x=\"+x)\r\n","    year  = int(x[:4])\r\n","    month = int(x[4:6])\r\n","    day   = int(x[6:8])\r\n","    hour  = int(x[8:10])\r\n","    #print(year,month,day,hour)\r\n","    #mim  = int(x[10:12])\r\n","    #sec  = int(x[12:])\r\n","    return dt.datetime(year, month, day, hour) #20201130190653\r\n","\r\n","def string2num(x):\r\n","    # (,)( )과 같은 불피요한 데이터 정제\r\n","    x = re.sub(r\"[^0-9]+\", '', str(x))\r\n","    if x =='':\r\n","        return 0\r\n","    else:\r\n","        return int(x)\r\n","\r\n","PATH='/content/mnt/MyDrive/Colab Notebooks/'\r\n","#PATH = '/content/'"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":204},"id":"elmIP6j12Yj7","executionInfo":{"status":"ok","timestamp":1610695038292,"user_tz":-540,"elapsed":34509,"user":{"displayName":"성균관대변성진","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gifg8rB1NI4un7i9fE4zvhEZckT8bZVtcokCAgH=s64","userId":"11276981063598458696"}},"outputId":"8a8cef0b-98ce-4ab4-97db-e84991016bfe"},"source":["train_err  = pd.read_csv(PATH+'train_err_data.csv')\r\n","display(train_err.head())"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>user_id</th>\n","      <th>time</th>\n","      <th>model_nm</th>\n","      <th>fwver</th>\n","      <th>errtype</th>\n","      <th>errcode</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>10000</td>\n","      <td>20201101025616</td>\n","      <td>model_3</td>\n","      <td>05.15.2138</td>\n","      <td>15</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>10000</td>\n","      <td>20201101030309</td>\n","      <td>model_3</td>\n","      <td>05.15.2138</td>\n","      <td>12</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>10000</td>\n","      <td>20201101030309</td>\n","      <td>model_3</td>\n","      <td>05.15.2138</td>\n","      <td>11</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>10000</td>\n","      <td>20201101050514</td>\n","      <td>model_3</td>\n","      <td>05.15.2138</td>\n","      <td>16</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>10000</td>\n","      <td>20201101050515</td>\n","      <td>model_3</td>\n","      <td>05.15.2138</td>\n","      <td>4</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   user_id            time model_nm       fwver  errtype errcode\n","0    10000  20201101025616  model_3  05.15.2138       15       1\n","1    10000  20201101030309  model_3  05.15.2138       12       1\n","2    10000  20201101030309  model_3  05.15.2138       11       1\n","3    10000  20201101050514  model_3  05.15.2138       16       1\n","4    10000  20201101050515  model_3  05.15.2138        4       0"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":204},"id":"87_CSxmO2Z7z","executionInfo":{"status":"ok","timestamp":1610695038293,"user_tz":-540,"elapsed":34508,"user":{"displayName":"성균관대변성진","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gifg8rB1NI4un7i9fE4zvhEZckT8bZVtcokCAgH=s64","userId":"11276981063598458696"}},"outputId":"61373602-6d6e-4280-cdf9-3fe5ec38d088"},"source":["# 데이터 설명을 확인하면\r\n","# ueser_id가 10000부터 24999까지 총 15000개가 연속적으로 존재.\r\n","display(train_err.head())\r\n","train_user_id_max = 24999\r\n","train_user_id_min = 10000\r\n","train_user_number = 15000"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>user_id</th>\n","      <th>time</th>\n","      <th>model_nm</th>\n","      <th>fwver</th>\n","      <th>errtype</th>\n","      <th>errcode</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>10000</td>\n","      <td>20201101025616</td>\n","      <td>model_3</td>\n","      <td>05.15.2138</td>\n","      <td>15</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>10000</td>\n","      <td>20201101030309</td>\n","      <td>model_3</td>\n","      <td>05.15.2138</td>\n","      <td>12</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>10000</td>\n","      <td>20201101030309</td>\n","      <td>model_3</td>\n","      <td>05.15.2138</td>\n","      <td>11</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>10000</td>\n","      <td>20201101050514</td>\n","      <td>model_3</td>\n","      <td>05.15.2138</td>\n","      <td>16</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>10000</td>\n","      <td>20201101050515</td>\n","      <td>model_3</td>\n","      <td>05.15.2138</td>\n","      <td>4</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   user_id            time model_nm       fwver  errtype errcode\n","0    10000  20201101025616  model_3  05.15.2138       15       1\n","1    10000  20201101030309  model_3  05.15.2138       12       1\n","2    10000  20201101030309  model_3  05.15.2138       11       1\n","3    10000  20201101050514  model_3  05.15.2138       16       1\n","4    10000  20201101050515  model_3  05.15.2138        4       0"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"7WEiMsVo2a-A"},"source":["train_prob = pd.read_csv(PATH+'train_problem_data.csv')\r\n","\r\n","problem = np.zeros(15000)\r\n","newproblem=np.zeros(15000)\r\n","# error와 동일한 방법으로 person_idx - 10000 위치에 \r\n","# person_idx의 problem이 한 번이라도 발생했다면 1\r\n","# 없다면 0   문제가 하나도 없었던 사람은 0이야.\r\n","problem[train_prob.user_id.unique()-10000] = 1   \r\n","problem.shape\r\n","max=0\r\n","prob=train_prob[['user_id']].values"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vzuyfyao6I7w","executionInfo":{"status":"ok","timestamp":1610695118403,"user_tz":-540,"elapsed":31211,"user":{"displayName":"성균관대변성진","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gifg8rB1NI4un7i9fE4zvhEZckT8bZVtcokCAgH=s64","userId":"11276981063598458696"}},"outputId":"fed7f610-673b-46d7-a5fd-ad2cc9deb64d"},"source":["#참고) 일별 합산 데이터 생성 코드      \r\n","import datetime\r\n","#train_err = pd.read_csv(PATH+'train_err_data.csv')\r\n","train_err['datetime']=pd.to_datetime(train_err['time'])\r\n","#train_err['time']\r\n","#train_err['time'][0]\r\n","#print(train_err['time'])\r\n","train_err['datetime'] = train_err['time'].apply(make_datetime)\r\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["2020-11-01 03:00:00\n","true\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"VfvQ94jK2eGW"},"source":["#problem 개수\r\n","cntmy=[0]*15000\r\n","\r\n","timeprob=np.zeros((15000,5,5),dtype=\"object\") #15000명이있고, 한명당 최대 5번의 problem을 제기한적이 있다. \r\n","#각 problem당, [[problem이 일어난시간],[problem이 일어난시간 +1시간 전까지 일어난 err 의 시간 리스트], \r\n","#                [해당 errtype들 리스트], [해당 errcode들 리스트], [해당 err의 fwver 리스트]\r\n","#               ]\r\n","\r\n","train_prob['datetime'] = train_prob['time'].apply(make_datetime)\r\n","id_probl = train_prob[['user_id','datetime']].values\r\n","id_errtime=train_err[['user_id','datetime','fwver','errtype','errcode']].values\r\n","\r\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_fK3V2Ew2l5t","executionInfo":{"status":"ok","timestamp":1610695228472,"user_tz":-540,"elapsed":88860,"user":{"displayName":"성균관대변성진","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gifg8rB1NI4un7i9fE4zvhEZckT8bZVtcokCAgH=s64","userId":"11276981063598458696"}},"outputId":"30f833c0-e506-432e-adfa-329d038c3f82"},"source":["\r\n","curuser=10000\r\n","first=0\r\n","last=0\r\n","cnt=0\r\n","idarr=[]\r\n","for uid,dtime,fw,errty,errco in tqdm(id_errtime):\r\n","    if (curuser==uid):\r\n","        last=cnt\r\n","    else:\r\n","        li=[]\r\n","        li.append(first)\r\n","        li.append(last)\r\n","        idarr.append(li)\r\n","        first=cnt\r\n","        curuser=uid\r\n","    cnt+=1\r\n","li=[]\r\n","li.append(first)\r\n","li.append(last)\r\n","idarr.append(li)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["100%|██████████| 16554663/16554663 [00:27<00:00, 599529.44it/s]\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nLNtm-xk3ZCz","executionInfo":{"status":"ok","timestamp":1610695228720,"user_tz":-540,"elapsed":88746,"user":{"displayName":"성균관대변성진","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gifg8rB1NI4un7i9fE4zvhEZckT8bZVtcokCAgH=s64","userId":"11276981063598458696"}},"outputId":"7fed4a87-7bce-4e32-8efc-087f6c20454c"},"source":["idarr #[0,316], [317,2681]\r\n","print(id_errtime[0],id_errtime[316],id_errtime[317],id_errtime[2681],id_errtime[2682])\r\n","#위의 코드는 이것과같이 userid 0번(실제론 uid==10000 인 사람)이 train_err.csv의 몇번째 index부터 몇번째 index까지 있는지\r\n","\r\n","#idarr의 0번째항은 [0,316]이야. 즉 id_errtime[0]~id_errtime[316]까지는 모두 userid==10000의 data\r\n","# 1번째항은 [317,2681] 이니까 즉 id_errtime 317  ~~ 2681 까지는 모두 userid == 10001의 data인거"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[10000 Timestamp('2020-11-01 02:00:00') '05.15.2138' 15 '1'] [10000 Timestamp('2020-11-30 21:00:00') '05.15.2138' 15 '1'] [10001 Timestamp('2020-11-01 02:00:00') '04.33.1185' 15 '1'] [10001 Timestamp('2020-11-30 22:00:00') '04.33.1261' 31 '0'] [10002 Timestamp('2020-11-01 03:00:00') '05.15.2138' 11 '1']\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AJwCvZbn3304","executionInfo":{"status":"ok","timestamp":1610695286457,"user_tz":-540,"elapsed":146095,"user":{"displayName":"성균관대변성진","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gifg8rB1NI4un7i9fE4zvhEZckT8bZVtcokCAgH=s64","userId":"11276981063598458696"}},"outputId":"87f1dea5-cec4-4912-fd17-80080da5c135"},"source":["cnt=0\r\n","cntmy=[0]*15000 #cntmy는 problem이 한명당 최대 5번까지 있을 수 있으니까, 해당 user가 처음으로 문제가 발견되었을 땐\r\n","#timeprob[userid][0] 번째에 넣어야하고, 2번째로 문제제기 했을땐 timeprob[userid][1] 번째에 넣어야 하고, 또 발견되면 2번째에 넣어야하고\r\n","#하기 때문에 필요함\r\n","\r\n","for person_idx, timeid in tqdm(id_probl):\r\n","    cntmy[person_idx-10000]+=1\r\n","    cnt+=1\r\n","    #print(person_idx,timeid)\r\n","    tili=[]#timelist\r\n","    tyli=[]#typelist\r\n","    coli=[]#codelist\r\n","    fwli=[]#fwverlist\r\n","    first,last =idarr[person_idx-10000] #위에서 만든 idarr로 어디서부터 어디까지가 해당 user인지 알 수 있어\r\n","    for i in range(first,last+1):\r\n","        uid,dtime,fw,errty,errco = id_errtime[i]\r\n","        if(dtime< timeid+datetime.timedelta(hours=2)): # 문제가 제기된 시간 +2시간 이내의 모든 errtype모음 왜 1시간이냐구? 데이터 불러올때 분이랑 초를 다 날려먹었기때문\r\n","            tili.append(dtime)\r\n","            tyli.append(errty)\r\n","            coli.append(errco)\r\n","            fwli.append(fw)\r\n","    tim=[]\r\n","    tim.append(timeid)\r\n","    timeprob[person_idx-10000,cntmy[person_idx-10000]-1,0]=tim # 0번째는 그 problem시간\r\n","    timeprob[person_idx-10000,cntmy[person_idx-10000]-1,1]=tili#err시간\r\n","    timeprob[person_idx-10000,cntmy[person_idx-10000]-1,2]=tyli#errtype\r\n","    timeprob[person_idx-10000,cntmy[person_idx-10000]-1,3]=coli#errcode\r\n","    timeprob[person_idx-10000,cntmy[person_idx-10000]-1,4]=fwli#firmware\r\n","\r\n","\r\n","#print(tim,tili,tyli,coli)\r\n","    "],"execution_count":null,"outputs":[{"output_type":"stream","text":["100%|██████████| 5429/5429 [00:57<00:00, 94.05it/s] \n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":409},"id":"Hl6Lnxrp4sdw","executionInfo":{"status":"ok","timestamp":1610695287681,"user_tz":-540,"elapsed":146760,"user":{"displayName":"성균관대변성진","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gifg8rB1NI4un7i9fE4zvhEZckT8bZVtcokCAgH=s64","userId":"11276981063598458696"}},"outputId":"927f4d50-3802-4207-e1c9-52106a2f0c20"},"source":["import itertools #이게 색깔 다양하게 만들어내는 코드\r\n","a=[0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1] #이렇게 RGB는 (0~1,0~1,0~1) 의 튜플? 로 표현해야하는데 \r\n","npr=itertools.permutations(a,3) #이 permutation으로 하면 990개 색깔을 만들어낼 수 있어.\r\n","ac=list(npr)\r\n","#print(len(ac)) 990개 색깔\r\n","plt.plot([1,2,3,4],c=ac[989]) # 이 color에 RGB값을 넣어줄거야\r\n","plt.show()\r\n","\r\n","print(train_err.fwver.unique())"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"stream","text":["['05.15.2138' '04.33.1185' '04.33.1261' '04.22.1750' '04.22.1778'\n"," '04.16.3553' '04.33.1149' '04.16.3571' '05.66.3237' '05.66.3571'\n"," '03.11.1149' '04.22.1684' '03.11.1167' '04.82.1684' '04.82.1778'\n"," '04.33.1171' '04.73.2237' '10' '04.82.1730' '04.73.2571' '8.5.3'\n"," '04.22.1666' '03.11.1141' '05.15.2120' '04.33.1125' '04.16.3439'\n"," '04.22.1442' '04.33.1095' '04.16.3569' '05.15.2090' '05.15.3104'\n"," '05.15.2122' '04.22.1656' '04.16.2641' '05.15.2114' '04.16.3345'\n"," '05.15.2092']\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"NXgfS3Dy48k1","executionInfo":{"status":"ok","timestamp":1610695291825,"user_tz":-540,"elapsed":150472,"user":{"displayName":"성균관대변성진","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gifg8rB1NI4un7i9fE4zvhEZckT8bZVtcokCAgH=s64","userId":"11276981063598458696"}},"outputId":"0647a713-db47-4cf7-abe9-996ccb52a33b"},"source":["cnt=0\r\n","cindex=0\r\n","for uid in range(15000):\r\n","    cnt+=1\r\n","    for j in range(5):\r\n","        if (type(timeprob[uid][j][0]) == type(0)):#데이터없을때\r\n","            break\r\n","        else:\r\n","            #t1=np.arange(0,len(timeprod[uid][j][2])) #2: errtype, 3: errcode 4: fwver\r\n","            plotli=[] #errtype들을 담아줄 리스트\r\n","            for fw in range(len(timeprob[uid][j][4])) :\r\n","                if ( timeprob[uid][j][4][fw] == '05.15.2138'): \r\n","                    plotli.append(timeprob[uid][j][2][fw]) #errtype을 리스트에 담는다\r\n","            if (len(plotli)==0):\r\n","                continue\r\n","            else:\r\n","                if (len(plotli)>30): # 임의로 길이가 30개보다 긴 리스트는 그냥 표시 안하기\r\n","                    continue\r\n","                t1=np.arange(0,len(plotli)) # np.arange(0,10) 하면 [0,1,2,...,9인가 10인가] 만들어진대\r\n","                #print(plotli,t1)\r\n","                plt.scatter(t1,plotli,c=ac[cindex%990]) #색깔을 담아놓자 x축은 그냥 0~errtype개수, plotli에는 errtype값\r\n","                #plt.plot(t1,plotli,c=ac[cindex%990]) #주석을 해제하면 위의 점끼리 연결된 그래프가 된대\r\n","                cindex+=1\r\n","plt.show()\r\n","                "],"execution_count":null,"outputs":[{"output_type":"stream","text":["*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"],"name":"stderr"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"timzs5Bl6WfJ"},"source":[""],"execution_count":null,"outputs":[]}]}